#!/usr/bin/env bash

# refs: http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -eo pipefail
IFS=$'\n\t'

CLI=$(basename "${BASH_SOURCE[0]}")

usage() {
    cat <<-EOF
Usage: $CLI <repo> <...paths>

> Download folders or files from GitHub repo without cloning

Arguments:
    <repo>               like: \`username/repo\`, if username is missing, it will use the gh's username
    <...paths>           folders or files path

Options:
    -h, --help           output usage
    -v, --version        output version
    --verbose            enable debug
    -b, --branch         branch
    --outdir <path>      outdir path. Default is download current location and reserved repo dir path
    --outfile <path>     only support download single file

Examples:
    gh download yuler/gh-download README.md gh-download
    gh download cli/cli .github
    gh download yuler/actions ci/nodejs.yml --outdir .github/workflows
EOF
    exit
}

version() {
    echo "$CLI v0.4.0"
    exit
}

download_file() {
    local file=$1
    local dest=$2

    echo "File \`$file\` downloading..."

    if [[ -z $dest ]]; then
        dest=$file
    fi
    if [[ -n $outdir ]]; then
        echo "$outdir"
        echo "$file"
        dest="$outdir/$(basename "$file")"
    fi
    curl --location --create-dirs --oauth2-bearer "$token" "https://raw.githubusercontent.com/$repo/$branch/$1" -o "$dest"
}

download_folder() {
    local folder=$1

    echo "Folder $folder downloading..."
    files=$(gh api "repos/$repo/git/trees/$branch?recursive=1" --jq ".tree[] | select(.type == \"blob\") | .path | select(startswith(\"$folder/\"))")
    for file in $files; do
        download_file "$file"
    done
}

# Main
# refs: https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
# TODO: Move `getopts` refs: https://man7.org/linux/man-pages/man1/getopts.1p.html
POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
    -h | --help)
        usage
        ;;
    -v | --version)
        version
        ;;
    --verbose)
        set -x
        shift
        ;;
    -b | --branch)
        branch="$2"
        shift
        shift
        ;;
    --outdir)
        outdir="$2"
        shift
        shift
        ;;
    --outfile)
        outfile="$2"
        shift
        shift
        ;;
    *)
        POSITIONAL+=("$1")
        shift
        ;;
    esac
done
set -- "${POSITIONAL[@]}"

token=$(gh config get -h github.com oauth_token)

# TODO: check url from clipboard
# Parse argments from url
# Example: https://github.com/yuler/actions/blob/3541e20e6f195a812b0e775058224a6d6f4b9fc1/ci/nodejs.yml
regex="^https://github.com/([A-Za-z0-9_-]*)/([A-Za-z0-9._-]*)/(tree|blob)/([A-Za-z0-9._-]*)/(.*)"
if [[ $# == 1 ]]; then
    if [[ $1 =~ $regex ]]; then
        repo="${BASH_REMATCH[1]}/${BASH_REMATCH[2]}"

        branch="${BASH_REMATCH[4]}"
        path="${BASH_REMATCH[5]}"

        # TODO: Duplicated content below
        echo "Repo: $repo"
        echo "Branch: $branch"

        case "${BASH_REMATCH[3]}" in
        tree) download_folder "$path" ;;
        blob) download_file "$path" ;;
        esac
        exit
    else
        echo "Parse url $1 error."
    fi
else
    repo=$1
    shift
fi

if [[ ! $repo =~ .*/.* ]]; then
    username=$(gh config get -h github.com user)
    repo=$username/$repo
fi

if [[ ! $branch ]]; then
    branch=$(gh api "repos/$repo" --jq .default_branch)
fi

echo "Repo: $repo"
echo "Branch: $branch"

# Download single file
if [[ $# == 1 && $outfile ]]; then
    download_file "$1" "$outfile"
    exit
fi

# Iterate arguments
while (("$#")); do
    path=$1

    # Check path is folder?
    if [[ $path =~ .*/$ ]]; then
        folder=${path%/}
    else
        folder=$(gh api "repos/$repo/git/trees/$branch?recursive=1" --jq ".tree[] | select(.type == \"tree\") | .path | select(.==\"$path\")")
    fi

    if [[ $folder ]]; then
        download_folder "$folder"
    else
        download_file "$path"
    fi

    shift
done
